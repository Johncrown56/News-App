var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var DEFAULT_CONFIG = {
    dragThreshold: 20,
    allowElementScroll: false,
    maxDragAngle: 40,
    sideMenuThreshold: 50,
    transitionDuration: 150,
    shortSwipeDuration: 300,
    debug: false,
    avoidElements: false,
};
function pointerCoord(ev) {
    // get X coordinates for either a mouse click
    // or a touch depending on the given event
    if (ev) {
        var changedTouches = ev.changedTouches;
        if (changedTouches && changedTouches.length > 0) {
            var touch = changedTouches[0];
            return { x: touch.clientX, y: touch.clientY };
        }
        if (ev.pageX !== undefined) {
            return { x: ev.pageX, y: ev.pageY };
        }
    }
    return { x: 0, y: 0 };
}
var nativeScrollAvailable = 'scrollBehavior' in document.documentElement.style;
var _getTs;
if (window.performance && window.performance.now) {
    _getTs = window.performance.now.bind(window.performance);
}
else {
    _getTs = Date.now.bind(Date);
}
var getTs = _getTs;
var easeInOutCubic = function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; };
function getScrollCoord(start, dest, startTime, currentTime, duration) {
    var time = Math.min(1, (currentTime - startTime) / duration);
    var timeFn = easeInOutCubic(time);
    return Math.ceil((timeFn * (dest - start)) + start);
}
function scroll(el, startX, x, y, startTime, duration) {
    var currentTime = getTs();
    var scrollX = startX === x ? x : getScrollCoord(startX, x, startTime, currentTime, duration);
    el.scrollTo(scrollX, y);
    if (currentTime - startTime >= duration) {
        return;
    }
    requestAnimationFrame(function () {
        scroll(el, startX, x, y, startTime, duration);
    });
}
var scrollEl = function (el, x, y, native, duration) {
    if (y === void 0) { y = 0; }
    if (native === void 0) { native = false; }
    if (duration === void 0) { duration = 300; }
    if (duration <= 0) {
        requestAnimationFrame(function () {
            el.scrollTo(x, y);
        });
        return;
    }
    if (native && nativeScrollAvailable) {
        el.scrollTo({
            left: x,
            top: y,
            behavior: 'smooth',
        });
        return;
    }
    requestAnimationFrame(function () {
        scroll(el, el.scrollLeft, x, y, getTs(), duration);
    });
};
function checkGesture(newCoords, initialCoords, config) {
    if (!initialCoords) {
        return false;
    }
    var radians = config.maxDragAngle * (Math.PI / 180);
    var maxCosine = Math.cos(radians);
    var deltaX = newCoords.x - initialCoords.x;
    var deltaY = newCoords.y - initialCoords.y;
    var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    if (distance >= config.dragThreshold) {
        // swipe is long enough
        // lets check the angle
        var angle = Math.atan2(deltaY, deltaX);
        var cosine = Math.cos(angle);
        return Math.abs(cosine) > maxCosine;
    }
    return false;
}
function getNormalizedScrollX(el, width, delta) {
    if (delta === void 0) { delta = 0; }
    return Math.max(0, Math.min(el.scrollWidth - width, el.scrollLeft + delta));
}
var debugStyle1 = 'background: linear-gradient(135deg,#4150b2,#f71947); border: 1px solid #9a9a9a; color: #ffffff; border-bottom-left-radius: 2px; border-top-left-radius: 2px; padding: 2px 0 2px 4px;';
var debugStyle2 = 'background: #252b3e; border: 1px solid #9a9a9a; border-top-right-radius: 2px; border-bottom-right-radius: 2px; margin-left: -2px; padding: 2px 4px; color: white;';
function debugLog(config, tag, vals) {
    if (!config || !config.debug) {
        return;
    }
    // Some gorgeous logging, because apparently I have lots of free time to style console logs and write this comment
    console.log.apply(console, __spreadArrays(["%csuper-tabs %c%s", debugStyle1, debugStyle2, ' '.repeat(10 - tag.length) + tag], vals));
}
export { DEFAULT_CONFIG as D, getTs as a, checkGesture as c, debugLog as d, getNormalizedScrollX as g, pointerCoord as p, scrollEl as s };
