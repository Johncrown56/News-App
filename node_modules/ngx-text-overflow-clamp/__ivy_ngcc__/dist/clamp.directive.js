import { Directive, ElementRef, Input } from "@angular/core";
import * as clampLib from "text-overflow-clamp";
import * as ɵngcc0 from '@angular/core';
var TextOverflowClampDirective = /** @class */ (function () {
    function TextOverflowClampDirective(el) {
        this.el = el;
    }
    TextOverflowClampDirective.prototype.ngAfterViewInit = function () {
        clampLib(this.el.nativeElement, this.lines);
    };
    /** @nocollapse */
    TextOverflowClampDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    TextOverflowClampDirective.propDecorators = {
        'lines': [{ type: Input, args: ["clamp",] },],
    };
TextOverflowClampDirective.ɵfac = function TextOverflowClampDirective_Factory(t) { return new (t || TextOverflowClampDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TextOverflowClampDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TextOverflowClampDirective, selectors: [["", "clamp", ""]], inputs: { lines: ["clamp", "lines"] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextOverflowClampDirective, [{
        type: Directive,
        args: [{ selector: "[clamp]" }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { lines: [{
            type: Input,
            args: ["clamp"]
        }] }); })();
    return TextOverflowClampDirective;
}());
export { TextOverflowClampDirective };

//# sourceMappingURL=clamp.directive.js.map